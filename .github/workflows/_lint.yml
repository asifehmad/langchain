name: lint

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "From which folder this pipeline executes"

env:
  POETRY_VERSION: "1.4.2"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    steps:
      - uses: actions/checkout@v3
      - name: Restore workdir file mtimes to last-edited commit date
        # This is needed to make black caching work.
        # Black's cache uses file (mtime, size) to check whether a lookup is a cache hit.
        # Without this command, files in the repo would have the current time as the modified time,
        # since the previous action step just created them.
        # This command resets the mtime to the last time the files were modified in git instead,
        # which is a high-quality and stable representation of the last modification date.
        env:
          WORKDIR: ${{ inputs.working-directory == '' && '.' || inputs.working-directory }}
        run: |
          git log
          ls -alh "$WORKDIR/tests/unit_tests/"

          # This command runs at base of the repo, since we never `cd` to the `WORKDIR`.
          #
          # Important considerations:
          # - We only want to alter mtimes for Python files, since that's all black checks.
          # - We don't need to alter mtimes for directories, even if they contain Python files,
          #   since black doesn't look at those.
          # - We also only alter mtimes inside the `WORKDIR` since that's all we'll lint.
          # - This should run before `poetry install`, because poetry's venv also contains
          #   Python files, and we don't want to alter their mtimes since they aren't linted.
          .github/tools/git-restore-mtime --no-directories --first-parent "$WORKDIR/**/*.py"

          ls -alh "$WORKDIR/tests/unit_tests/"
      - uses: actions/cache@v3
        id: cache-pip
        name: Cache langchain editable pip install - ${{ matrix.python-version }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MIN: "15"
        with:
          path: |
            ~/.cache/pip
          key: pip-editable-langchain-deps-${{ runner.os }}-${{ runner.arch }}-py-${{ matrix.python-version }}
      - name: Install poetry
        run: |
          pipx install poetry==$POETRY_VERSION
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MIN: "15"
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
          cache-dependency-path: |
            ${{ inputs.working-directory == '' && '.' || inputs.working-directory }}/**/poetry.lock
      - name: Install dependencies
        working-directory: ${{ inputs.working-directory }}
        run: |
          poetry install
      - name: Install langchain editable
        working-directory: ${{ inputs.working-directory }}
        if: ${{ inputs.working-directory != 'langchain' }}
        run: |
          pip install -e ../langchain
      - name: Get mypy and black caches to speed up formatting
        uses: actions/cache@v3
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MIN: "15"
          WORKDIR: ${{ inputs.working-directory == '' && '.' || inputs.working-directory }}
        with:
          path: |
            ${{ env.WORKDIR }}/.mypy_cache
            ${{ env.WORKDIR }}/.black_cache
          key: mypy-black-${{ runner.os }}-${{ runner.arch }}-py${{ matrix.python-version }}-${{ inputs.working-directory }}-${{ hashFiles(format('{0}/poetry.lock', env.WORKDIR)) }}

      - name: Analysing the code with our lint
        working-directory: ${{ inputs.working-directory }}
        env:
          BLACK_CACHE_DIR: .black_cache
        run: |
          make lint
